// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file api.proto (package mindgraph, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message mindgraph.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message mindgraph.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message mindgraph.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string word = 2;
   */
  word = "";

  /**
   * @generated from field: string creator_id = 3;
   */
  creatorId = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "word", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message mindgraph.Edge
 */
export class Edge extends Message<Edge> {
  /**
   * @generated from field: string node_id_1 = 1;
   */
  nodeId1 = "";

  /**
   * @generated from field: string node_id_2 = 2;
   */
  nodeId2 = "";

  constructor(data?: PartialMessage<Edge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.Edge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id_1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id_2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Edge {
    return new Edge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Edge {
    return new Edge().fromJsonString(jsonString, options);
  }

  static equals(a: Edge | PlainMessage<Edge> | undefined, b: Edge | PlainMessage<Edge> | undefined): boolean {
    return proto3.util.equals(Edge, a, b);
  }
}

/**
 * @generated from message mindgraph.HelloRequest
 */
export class HelloRequest extends Message<HelloRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<HelloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.HelloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloRequest {
    return new HelloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloRequest | PlainMessage<HelloRequest> | undefined, b: HelloRequest | PlainMessage<HelloRequest> | undefined): boolean {
    return proto3.util.equals(HelloRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.HelloResponse
 */
export class HelloResponse extends Message<HelloResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<HelloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.HelloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloResponse {
    return new HelloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloResponse | PlainMessage<HelloResponse> | undefined, b: HelloResponse | PlainMessage<HelloResponse> | undefined): boolean {
    return proto3.util.equals(HelloResponse, a, b);
  }
}

/**
 * @generated from message mindgraph.JoinRequest
 */
export class JoinRequest extends Message<JoinRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<JoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.JoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinRequest {
    return new JoinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinRequest | PlainMessage<JoinRequest> | undefined, b: JoinRequest | PlainMessage<JoinRequest> | undefined): boolean {
    return proto3.util.equals(JoinRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.ThemeRequest
 */
export class ThemeRequest extends Message<ThemeRequest> {
  /**
   * @generated from field: string theme = 1;
   */
  theme = "";

  /**
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  constructor(data?: PartialMessage<ThemeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.ThemeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThemeRequest {
    return new ThemeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThemeRequest {
    return new ThemeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThemeRequest {
    return new ThemeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ThemeRequest | PlainMessage<ThemeRequest> | undefined, b: ThemeRequest | PlainMessage<ThemeRequest> | undefined): boolean {
    return proto3.util.equals(ThemeRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.CreateNodeRequest
 */
export class CreateNodeRequest extends Message<CreateNodeRequest> {
  /**
   * @generated from field: string word = 1;
   */
  word = "";

  /**
   * @generated from field: string creator_id = 2;
   */
  creatorId = "";

  constructor(data?: PartialMessage<CreateNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.CreateNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "word", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNodeRequest {
    return new CreateNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNodeRequest {
    return new CreateNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNodeRequest {
    return new CreateNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNodeRequest | PlainMessage<CreateNodeRequest> | undefined, b: CreateNodeRequest | PlainMessage<CreateNodeRequest> | undefined): boolean {
    return proto3.util.equals(CreateNodeRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.CreateEdgeRequest
 */
export class CreateEdgeRequest extends Message<CreateEdgeRequest> {
  /**
   * @generated from field: string node_id1 = 1;
   */
  nodeId1 = "";

  /**
   * @generated from field: string node_id2 = 2;
   */
  nodeId2 = "";

  /**
   * @generated from field: string creator_id = 3;
   */
  creatorId = "";

  constructor(data?: PartialMessage<CreateEdgeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.CreateEdgeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creator_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEdgeRequest {
    return new CreateEdgeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEdgeRequest {
    return new CreateEdgeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEdgeRequest {
    return new CreateEdgeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEdgeRequest | PlainMessage<CreateEdgeRequest> | undefined, b: CreateEdgeRequest | PlainMessage<CreateEdgeRequest> | undefined): boolean {
    return proto3.util.equals(CreateEdgeRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.VoteWordRequest
 */
export class VoteWordRequest extends Message<VoteWordRequest> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  constructor(data?: PartialMessage<VoteWordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.VoteWordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteWordRequest {
    return new VoteWordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteWordRequest {
    return new VoteWordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteWordRequest {
    return new VoteWordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VoteWordRequest | PlainMessage<VoteWordRequest> | undefined, b: VoteWordRequest | PlainMessage<VoteWordRequest> | undefined): boolean {
    return proto3.util.equals(VoteWordRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.UserJoinedEvent
 */
export class UserJoinedEvent extends Message<UserJoinedEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated mindgraph.User current_users = 2;
   */
  currentUsers: User[] = [];

  constructor(data?: PartialMessage<UserJoinedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.UserJoinedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserJoinedEvent | PlainMessage<UserJoinedEvent> | undefined, b: UserJoinedEvent | PlainMessage<UserJoinedEvent> | undefined): boolean {
    return proto3.util.equals(UserJoinedEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.UserLeftEvent
 */
export class UserLeftEvent extends Message<UserLeftEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated mindgraph.User current_users = 2;
   */
  currentUsers: User[] = [];

  constructor(data?: PartialMessage<UserLeftEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.UserLeftEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserLeftEvent | PlainMessage<UserLeftEvent> | undefined, b: UserLeftEvent | PlainMessage<UserLeftEvent> | undefined): boolean {
    return proto3.util.equals(UserLeftEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.ThemeConfirmedEvent
 */
export class ThemeConfirmedEvent extends Message<ThemeConfirmedEvent> {
  /**
   * @generated from field: string theme = 1;
   */
  theme = "";

  /**
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  constructor(data?: PartialMessage<ThemeConfirmedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.ThemeConfirmedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ThemeConfirmedEvent | PlainMessage<ThemeConfirmedEvent> | undefined, b: ThemeConfirmedEvent | PlainMessage<ThemeConfirmedEvent> | undefined): boolean {
    return proto3.util.equals(ThemeConfirmedEvent, a, b);
  }
}

/**
 * 新しくノードが作成/更新された
 *
 * @generated from message mindgraph.NodeUpdateEvent
 */
export class NodeUpdateEvent extends Message<NodeUpdateEvent> {
  /**
   * @generated from field: mindgraph.Node node = 1;
   */
  node?: Node;

  constructor(data?: PartialMessage<NodeUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.NodeUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Node },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeUpdateEvent {
    return new NodeUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeUpdateEvent {
    return new NodeUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeUpdateEvent {
    return new NodeUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: NodeUpdateEvent | PlainMessage<NodeUpdateEvent> | undefined, b: NodeUpdateEvent | PlainMessage<NodeUpdateEvent> | undefined): boolean {
    return proto3.util.equals(NodeUpdateEvent, a, b);
  }
}

/**
 * 新しく辺が作成/更新された
 *
 * @generated from message mindgraph.EdgeUpdateEvent
 */
export class EdgeUpdateEvent extends Message<EdgeUpdateEvent> {
  /**
   * @generated from field: mindgraph.Edge edge = 1;
   */
  edge?: Edge;

  constructor(data?: PartialMessage<EdgeUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.EdgeUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "edge", kind: "message", T: Edge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EdgeUpdateEvent {
    return new EdgeUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EdgeUpdateEvent {
    return new EdgeUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EdgeUpdateEvent {
    return new EdgeUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: EdgeUpdateEvent | PlainMessage<EdgeUpdateEvent> | undefined, b: EdgeUpdateEvent | PlainMessage<EdgeUpdateEvent> | undefined): boolean {
    return proto3.util.equals(EdgeUpdateEvent, a, b);
  }
}

/**
 * 誰かが投票を済ませた
 *
 * @generated from message mindgraph.VoteProgressEvent
 */
export class VoteProgressEvent extends Message<VoteProgressEvent> {
  /**
   * @generated from field: repeated string finished_user_ids = 1;
   */
  finishedUserIds: string[] = [];

  constructor(data?: PartialMessage<VoteProgressEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.VoteProgressEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "finished_user_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteProgressEvent {
    return new VoteProgressEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteProgressEvent {
    return new VoteProgressEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteProgressEvent {
    return new VoteProgressEvent().fromJsonString(jsonString, options);
  }

  static equals(a: VoteProgressEvent | PlainMessage<VoteProgressEvent> | undefined, b: VoteProgressEvent | PlainMessage<VoteProgressEvent> | undefined): boolean {
    return proto3.util.equals(VoteProgressEvent, a, b);
  }
}

/**
 * 全員の投票が終わり結果が定まった
 *
 * @generated from message mindgraph.ResultEvent
 */
export class ResultEvent extends Message<ResultEvent> {
  /**
   * @generated from field: string chosen_node_id = 1;
   */
  chosenNodeId = "";

  /**
   * @generated from field: string mvp_user_id = 2;
   */
  mvpUserId = "";

  /**
   * @generated from field: int32 my_score = 3;
   */
  myScore = 0;

  constructor(data?: PartialMessage<ResultEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.ResultEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chosen_node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mvp_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "my_score", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResultEvent {
    return new ResultEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResultEvent {
    return new ResultEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResultEvent {
    return new ResultEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ResultEvent | PlainMessage<ResultEvent> | undefined, b: ResultEvent | PlainMessage<ResultEvent> | undefined): boolean {
    return proto3.util.equals(ResultEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from oneof mindgraph.Event.event
   */
  event: {
    /**
     * @generated from field: mindgraph.UserJoinedEvent joined = 1;
     */
    value: UserJoinedEvent;
    case: "joined";
  } | {
    /**
     * @generated from field: mindgraph.UserLeftEvent left = 2;
     */
    value: UserLeftEvent;
    case: "left";
  } | {
    /**
     * @generated from field: mindgraph.ThemeConfirmedEvent theme_confirmed = 3;
     */
    value: ThemeConfirmedEvent;
    case: "themeConfirmed";
  } | {
    /**
     * @generated from field: mindgraph.NodeUpdateEvent node_updated = 4;
     */
    value: NodeUpdateEvent;
    case: "nodeUpdated";
  } | {
    /**
     * @generated from field: mindgraph.EdgeUpdateEvent edge_updated = 5;
     */
    value: EdgeUpdateEvent;
    case: "edgeUpdated";
  } | {
    /**
     * @generated from field: mindgraph.VoteProgressEvent vote_progress = 6;
     */
    value: VoteProgressEvent;
    case: "voteProgress";
  } | {
    /**
     * @generated from field: mindgraph.ResultEvent result = 7;
     */
    value: ResultEvent;
    case: "result";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "joined", kind: "message", T: UserJoinedEvent, oneof: "event" },
    { no: 2, name: "left", kind: "message", T: UserLeftEvent, oneof: "event" },
    { no: 3, name: "theme_confirmed", kind: "message", T: ThemeConfirmedEvent, oneof: "event" },
    { no: 4, name: "node_updated", kind: "message", T: NodeUpdateEvent, oneof: "event" },
    { no: 5, name: "edge_updated", kind: "message", T: EdgeUpdateEvent, oneof: "event" },
    { no: 6, name: "vote_progress", kind: "message", T: VoteProgressEvent, oneof: "event" },
    { no: 7, name: "result", kind: "message", T: ResultEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

