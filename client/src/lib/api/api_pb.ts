// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api.proto (package mindgraph, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message mindgraph.HelloRequest
 */
export class HelloRequest extends Message<HelloRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<HelloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.HelloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloRequest {
    return new HelloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloRequest | PlainMessage<HelloRequest> | undefined, b: HelloRequest | PlainMessage<HelloRequest> | undefined): boolean {
    return proto3.util.equals(HelloRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.HelloResponse
 */
export class HelloResponse extends Message<HelloResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<HelloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.HelloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloResponse {
    return new HelloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloResponse | PlainMessage<HelloResponse> | undefined, b: HelloResponse | PlainMessage<HelloResponse> | undefined): boolean {
    return proto3.util.equals(HelloResponse, a, b);
  }
}

/**
 * @generated from message mindgraph.JoinRequest
 */
export class JoinRequest extends Message<JoinRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<JoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.JoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinRequest {
    return new JoinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinRequest {
    return new JoinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinRequest | PlainMessage<JoinRequest> | undefined, b: JoinRequest | PlainMessage<JoinRequest> | undefined): boolean {
    return proto3.util.equals(JoinRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message mindgraph.UserJoinedEvent
 */
export class UserJoinedEvent extends Message<UserJoinedEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated mindgraph.User current_users = 2;
   */
  currentUsers: User[] = [];

  constructor(data?: PartialMessage<UserJoinedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.UserJoinedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserJoinedEvent {
    return new UserJoinedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserJoinedEvent | PlainMessage<UserJoinedEvent> | undefined, b: UserJoinedEvent | PlainMessage<UserJoinedEvent> | undefined): boolean {
    return proto3.util.equals(UserJoinedEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.UserLeftEvent
 */
export class UserLeftEvent extends Message<UserLeftEvent> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated mindgraph.User current_users = 2;
   */
  currentUsers: User[] = [];

  constructor(data?: PartialMessage<UserLeftEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.UserLeftEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserLeftEvent {
    return new UserLeftEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UserLeftEvent | PlainMessage<UserLeftEvent> | undefined, b: UserLeftEvent | PlainMessage<UserLeftEvent> | undefined): boolean {
    return proto3.util.equals(UserLeftEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.ThemeRequest
 */
export class ThemeRequest extends Message<ThemeRequest> {
  /**
   * @generated from field: string theme = 1;
   */
  theme = "";

  /**
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  constructor(data?: PartialMessage<ThemeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.ThemeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThemeRequest {
    return new ThemeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThemeRequest {
    return new ThemeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThemeRequest {
    return new ThemeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ThemeRequest | PlainMessage<ThemeRequest> | undefined, b: ThemeRequest | PlainMessage<ThemeRequest> | undefined): boolean {
    return proto3.util.equals(ThemeRequest, a, b);
  }
}

/**
 * @generated from message mindgraph.ThemeConfirmedEvent
 */
export class ThemeConfirmedEvent extends Message<ThemeConfirmedEvent> {
  /**
   * @generated from field: string theme = 1;
   */
  theme = "";

  /**
   * @generated from field: string sender_id = 2;
   */
  senderId = "";

  constructor(data?: PartialMessage<ThemeConfirmedEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.ThemeConfirmedEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ThemeConfirmedEvent {
    return new ThemeConfirmedEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ThemeConfirmedEvent | PlainMessage<ThemeConfirmedEvent> | undefined, b: ThemeConfirmedEvent | PlainMessage<ThemeConfirmedEvent> | undefined): boolean {
    return proto3.util.equals(ThemeConfirmedEvent, a, b);
  }
}

/**
 * @generated from message mindgraph.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from oneof mindgraph.Event.event
   */
  event: {
    /**
     * @generated from field: mindgraph.UserJoinedEvent joined = 1;
     */
    value: UserJoinedEvent;
    case: "joined";
  } | {
    /**
     * @generated from field: mindgraph.UserLeftEvent left = 2;
     */
    value: UserLeftEvent;
    case: "left";
  } | {
    /**
     * @generated from field: mindgraph.ThemeConfirmedEvent theme_confirmed = 3;
     */
    value: ThemeConfirmedEvent;
    case: "themeConfirmed";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mindgraph.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "joined", kind: "message", T: UserJoinedEvent, oneof: "event" },
    { no: 2, name: "left", kind: "message", T: UserLeftEvent, oneof: "event" },
    { no: 3, name: "theme_confirmed", kind: "message", T: ThemeConfirmedEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

