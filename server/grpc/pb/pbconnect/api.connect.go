// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api.proto

package pbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pb "github.com/itsp-pbl-2023/mind-graph/grpc/pb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MindGraphServiceName is the fully-qualified name of the MindGraphService service.
	MindGraphServiceName = "mindgraph.MindGraphService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MindGraphServiceHelloProcedure is the fully-qualified name of the MindGraphService's Hello RPC.
	MindGraphServiceHelloProcedure = "/mindgraph.MindGraphService/Hello"
	// MindGraphServiceJoinProcedure is the fully-qualified name of the MindGraphService's Join RPC.
	MindGraphServiceJoinProcedure = "/mindgraph.MindGraphService/Join"
	// MindGraphServiceSetThemeProcedure is the fully-qualified name of the MindGraphService's SetTheme
	// RPC.
	MindGraphServiceSetThemeProcedure = "/mindgraph.MindGraphService/SetTheme"
	// MindGraphServiceCreateNodeProcedure is the fully-qualified name of the MindGraphService's
	// CreateNode RPC.
	MindGraphServiceCreateNodeProcedure = "/mindgraph.MindGraphService/CreateNode"
	// MindGraphServiceCreateEdgeProcedure is the fully-qualified name of the MindGraphService's
	// CreateEdge RPC.
	MindGraphServiceCreateEdgeProcedure = "/mindgraph.MindGraphService/CreateEdge"
	// MindGraphServiceVoteWordProcedure is the fully-qualified name of the MindGraphService's VoteWord
	// RPC.
	MindGraphServiceVoteWordProcedure = "/mindgraph.MindGraphService/VoteWord"
)

// MindGraphServiceClient is a client for the mindgraph.MindGraphService service.
type MindGraphServiceClient interface {
	Hello(context.Context, *connect_go.Request[pb.HelloRequest]) (*connect_go.Response[pb.HelloResponse], error)
	Join(context.Context, *connect_go.Request[pb.JoinRequest]) (*connect_go.ServerStreamForClient[pb.Event], error)
	SetTheme(context.Context, *connect_go.Request[pb.ThemeRequest]) (*connect_go.Response[pb.Empty], error)
	CreateNode(context.Context, *connect_go.Request[pb.CreateNodeRequest]) (*connect_go.Response[pb.CreateNodeResponse], error)
	CreateEdge(context.Context, *connect_go.Request[pb.CreateEdgeRequest]) (*connect_go.Response[pb.Empty], error)
	VoteWord(context.Context, *connect_go.Request[pb.VoteWordRequest]) (*connect_go.Response[pb.Empty], error)
}

// NewMindGraphServiceClient constructs a client for the mindgraph.MindGraphService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMindGraphServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MindGraphServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &mindGraphServiceClient{
		hello: connect_go.NewClient[pb.HelloRequest, pb.HelloResponse](
			httpClient,
			baseURL+MindGraphServiceHelloProcedure,
			opts...,
		),
		join: connect_go.NewClient[pb.JoinRequest, pb.Event](
			httpClient,
			baseURL+MindGraphServiceJoinProcedure,
			opts...,
		),
		setTheme: connect_go.NewClient[pb.ThemeRequest, pb.Empty](
			httpClient,
			baseURL+MindGraphServiceSetThemeProcedure,
			opts...,
		),
		createNode: connect_go.NewClient[pb.CreateNodeRequest, pb.CreateNodeResponse](
			httpClient,
			baseURL+MindGraphServiceCreateNodeProcedure,
			opts...,
		),
		createEdge: connect_go.NewClient[pb.CreateEdgeRequest, pb.Empty](
			httpClient,
			baseURL+MindGraphServiceCreateEdgeProcedure,
			opts...,
		),
		voteWord: connect_go.NewClient[pb.VoteWordRequest, pb.Empty](
			httpClient,
			baseURL+MindGraphServiceVoteWordProcedure,
			opts...,
		),
	}
}

// mindGraphServiceClient implements MindGraphServiceClient.
type mindGraphServiceClient struct {
	hello      *connect_go.Client[pb.HelloRequest, pb.HelloResponse]
	join       *connect_go.Client[pb.JoinRequest, pb.Event]
	setTheme   *connect_go.Client[pb.ThemeRequest, pb.Empty]
	createNode *connect_go.Client[pb.CreateNodeRequest, pb.CreateNodeResponse]
	createEdge *connect_go.Client[pb.CreateEdgeRequest, pb.Empty]
	voteWord   *connect_go.Client[pb.VoteWordRequest, pb.Empty]
}

// Hello calls mindgraph.MindGraphService.Hello.
func (c *mindGraphServiceClient) Hello(ctx context.Context, req *connect_go.Request[pb.HelloRequest]) (*connect_go.Response[pb.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// Join calls mindgraph.MindGraphService.Join.
func (c *mindGraphServiceClient) Join(ctx context.Context, req *connect_go.Request[pb.JoinRequest]) (*connect_go.ServerStreamForClient[pb.Event], error) {
	return c.join.CallServerStream(ctx, req)
}

// SetTheme calls mindgraph.MindGraphService.SetTheme.
func (c *mindGraphServiceClient) SetTheme(ctx context.Context, req *connect_go.Request[pb.ThemeRequest]) (*connect_go.Response[pb.Empty], error) {
	return c.setTheme.CallUnary(ctx, req)
}

// CreateNode calls mindgraph.MindGraphService.CreateNode.
func (c *mindGraphServiceClient) CreateNode(ctx context.Context, req *connect_go.Request[pb.CreateNodeRequest]) (*connect_go.Response[pb.CreateNodeResponse], error) {
	return c.createNode.CallUnary(ctx, req)
}

// CreateEdge calls mindgraph.MindGraphService.CreateEdge.
func (c *mindGraphServiceClient) CreateEdge(ctx context.Context, req *connect_go.Request[pb.CreateEdgeRequest]) (*connect_go.Response[pb.Empty], error) {
	return c.createEdge.CallUnary(ctx, req)
}

// VoteWord calls mindgraph.MindGraphService.VoteWord.
func (c *mindGraphServiceClient) VoteWord(ctx context.Context, req *connect_go.Request[pb.VoteWordRequest]) (*connect_go.Response[pb.Empty], error) {
	return c.voteWord.CallUnary(ctx, req)
}

// MindGraphServiceHandler is an implementation of the mindgraph.MindGraphService service.
type MindGraphServiceHandler interface {
	Hello(context.Context, *connect_go.Request[pb.HelloRequest]) (*connect_go.Response[pb.HelloResponse], error)
	Join(context.Context, *connect_go.Request[pb.JoinRequest], *connect_go.ServerStream[pb.Event]) error
	SetTheme(context.Context, *connect_go.Request[pb.ThemeRequest]) (*connect_go.Response[pb.Empty], error)
	CreateNode(context.Context, *connect_go.Request[pb.CreateNodeRequest]) (*connect_go.Response[pb.CreateNodeResponse], error)
	CreateEdge(context.Context, *connect_go.Request[pb.CreateEdgeRequest]) (*connect_go.Response[pb.Empty], error)
	VoteWord(context.Context, *connect_go.Request[pb.VoteWordRequest]) (*connect_go.Response[pb.Empty], error)
}

// NewMindGraphServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMindGraphServiceHandler(svc MindGraphServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(MindGraphServiceHelloProcedure, connect_go.NewUnaryHandler(
		MindGraphServiceHelloProcedure,
		svc.Hello,
		opts...,
	))
	mux.Handle(MindGraphServiceJoinProcedure, connect_go.NewServerStreamHandler(
		MindGraphServiceJoinProcedure,
		svc.Join,
		opts...,
	))
	mux.Handle(MindGraphServiceSetThemeProcedure, connect_go.NewUnaryHandler(
		MindGraphServiceSetThemeProcedure,
		svc.SetTheme,
		opts...,
	))
	mux.Handle(MindGraphServiceCreateNodeProcedure, connect_go.NewUnaryHandler(
		MindGraphServiceCreateNodeProcedure,
		svc.CreateNode,
		opts...,
	))
	mux.Handle(MindGraphServiceCreateEdgeProcedure, connect_go.NewUnaryHandler(
		MindGraphServiceCreateEdgeProcedure,
		svc.CreateEdge,
		opts...,
	))
	mux.Handle(MindGraphServiceVoteWordProcedure, connect_go.NewUnaryHandler(
		MindGraphServiceVoteWordProcedure,
		svc.VoteWord,
		opts...,
	))
	return "/mindgraph.MindGraphService/", mux
}

// UnimplementedMindGraphServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMindGraphServiceHandler struct{}

func (UnimplementedMindGraphServiceHandler) Hello(context.Context, *connect_go.Request[pb.HelloRequest]) (*connect_go.Response[pb.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.Hello is not implemented"))
}

func (UnimplementedMindGraphServiceHandler) Join(context.Context, *connect_go.Request[pb.JoinRequest], *connect_go.ServerStream[pb.Event]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.Join is not implemented"))
}

func (UnimplementedMindGraphServiceHandler) SetTheme(context.Context, *connect_go.Request[pb.ThemeRequest]) (*connect_go.Response[pb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.SetTheme is not implemented"))
}

func (UnimplementedMindGraphServiceHandler) CreateNode(context.Context, *connect_go.Request[pb.CreateNodeRequest]) (*connect_go.Response[pb.CreateNodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.CreateNode is not implemented"))
}

func (UnimplementedMindGraphServiceHandler) CreateEdge(context.Context, *connect_go.Request[pb.CreateEdgeRequest]) (*connect_go.Response[pb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.CreateEdge is not implemented"))
}

func (UnimplementedMindGraphServiceHandler) VoteWord(context.Context, *connect_go.Request[pb.VoteWordRequest]) (*connect_go.Response[pb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mindgraph.MindGraphService.VoteWord is not implemented"))
}
